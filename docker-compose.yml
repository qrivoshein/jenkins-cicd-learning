version: '3.8'

services:
  # Jenkins сервер
  jenkins:
    image: jenkins/jenkins:lts-jdk17
    container_name: jenkins-cicd
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "50000:50000"
    environment:
      - JENKINS_OPTS=--httpPort=8080
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - ./jenkins/plugins.txt:/usr/share/jenkins/ref/plugins.txt
      - ./jenkins/jobs:/var/jenkins_home/jobs
      - ./jenkins/scripts:/var/jenkins_home/scripts
    networks:
      - jenkins-network

  # GitLab для хранения кода
  gitlab:
    image: gitlab/gitlab-ce:latest
    container_name: gitlab-cicd
    restart: unless-stopped
    ports:
      - "8081:80"
      - "2222:22"
    environment:
      - GITLAB_ROOT_PASSWORD=StrongPassword123!
      - GITLAB_OMNIBUS_CONFIG=external_url 'http://localhost:8081'; nginx['listen_port'] = 80; gitlab_rails['gitlab_shell_ssh_port'] = 2222;
    volumes:
      - gitlab_config:/etc/gitlab
      - gitlab_logs:/var/log/gitlab
      - gitlab_data:/var/opt/gitlab
    networks:
      - jenkins-network

  # Приложение на Development стенде
  app-dev:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: task-manager-dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
    volumes:
      - ./app:/app
      - /app/node_modules
    networks:
      - jenkins-network
    depends_on:
      - jenkins

  # Приложение на Staging стенде
  app-staging:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: task-manager-staging
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=staging
      - PORT=3000
    networks:
      - jenkins-network
    depends_on:
      - jenkins

  # Приложение на Production стенде
  app-prod:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: task-manager-prod
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    networks:
      - jenkins-network
    depends_on:
      - jenkins

  # Nginx для балансировки нагрузки
  nginx:
    image: nginx:alpine
    container_name: nginx-balancer
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - jenkins-network
    depends_on:
      - app-dev
      - app-staging
      - app-prod

volumes:
  jenkins_home:
  gitlab_config:
  gitlab_logs:
  gitlab_data:

networks:
  jenkins-network:
    driver: bridge
