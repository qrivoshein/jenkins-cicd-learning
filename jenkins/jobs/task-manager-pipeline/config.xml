<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1289.vd2290d3340a_f">
  <description>CI/CD Pipeline –¥–ª—è Task Manager –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.discarder__notifier.DiscarderProperty plugin="discarder@1.5">
      <strategy class="hudson.plugins.discarder__notifier.impl.LogRotator">
        <daysToKeep>7</daysToKeep>
        <numToKeep>10</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </hudson.plugins.discarder__notifier.DiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>DEPLOY_ENVIRONMENT</name>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>development</string>
              <string>staging</string>
              <string>production</string>
            </a>
          </choices>
          <description>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–µ–¥—É –¥–ª—è –¥–µ–ø–ª–æ—è</description>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>RUN_TESTS</name>
          <description>–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>BUILD_DOCKER</name>
          <description>–°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3697.vb_490d2aa2c31">
    <script>pipeline {
    agent any
    
    environment {
        APP_NAME = 'task-manager'
        DOCKER_REGISTRY = 'localhost:5000'
        GIT_REPO = 'http://gitlab:80/root/task-manager.git'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üöÄ –ù–∞—á–∏–Ω–∞–µ–º CI/CD Pipeline'
                echo "üì¶ –î–µ–ø–ª–æ–π –≤ —Å—Ä–µ–¥—É: ${params.DEPLOY_ENVIRONMENT}"
                
                // –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
                checkout scm
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–∏—Ç–µ
                script {
                    def gitCommit = sh(
                        script: 'git rev-parse --short HEAD',
                        returnStdout: true
                    ).trim()
                    env.GIT_COMMIT_SHORT = gitCommit
                    echo "üîç –ö–æ–º–º–∏—Ç: ${env.GIT_COMMIT_SHORT}"
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'üì• –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...'
                sh 'npm ci'
            }
        }
        
        stage('Code Quality') {
            steps {
                echo 'üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞...'
                
                // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
                sh 'node -c server.js'
                sh 'node -c test.js'
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json
                sh 'npm audit --audit-level moderate || true'
            }
        }
        
        stage('Run Tests') {
            when {
                expression { params.RUN_TESTS == true }
            }
            steps {
                echo 'üß™ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã...'
                
                script {
                    try {
                        sh 'node test.js'
                        echo '‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!'
                    } catch (Exception e) {
                        echo '‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏!'
                        error '–¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É'
                    }
                }
            }
        }
        
        stage('Build Application') {
            steps {
                echo 'üèóÔ∏è –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...'
                
                // –°–æ–∑–¥–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
                sh 'mkdir -p artifacts'
                sh 'cp -r app/* artifacts/'
                sh 'cp package*.json artifacts/'
                
                // –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
                sh 'tar -czf artifacts.tar.gz artifacts/'
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
                archiveArtifacts artifacts: 'artifacts.tar.gz', fingerprint: true
            }
        }
        
        stage('Build Docker Image') {
            when {
                expression { params.BUILD_DOCKER == true }
            }
            steps {
                echo 'üê≥ –°–æ–±–∏—Ä–∞–µ–º Docker –æ–±—Ä–∞–∑...'
                
                script {
                    def imageTag = "${env.GIT_COMMIT_SHORT}"
                    def fullImageName = "${DOCKER_REGISTRY}/${APP_NAME}:${imageTag}"
                    
                    // –°–æ–±–∏—Ä–∞–µ–º Docker –æ–±—Ä–∞–∑
                    sh "docker build -t ${fullImageName} ./app"
                    
                    // –¢–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–∑ –¥–ª—è —Å—Ä–µ–¥—ã
                    sh "docker tag ${fullImageName} ${DOCKER_REGISTRY}/${APP_NAME}:${params.DEPLOY_ENVIRONMENT}-latest"
                    
                    echo "üê≥ –û–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω: ${fullImageName}"
                }
            }
        }
        
        stage('Deploy to Environment') {
            steps {
                echo "üöÄ –î–µ–ø–ª–æ–∏–º –≤ —Å—Ä–µ–¥—É: ${params.DEPLOY_ENVIRONMENT}"
                
                script {
                    switch(params.DEPLOY_ENVIRONMENT) {
                        case 'development':
                            deployToDevelopment()
                            break
                        case 'staging':
                            deployToStaging()
                            break
                        case 'production':
                            deployToProduction()
                            break
                        default:
                            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ä–µ–¥–∞: ${params.DEPLOY_ENVIRONMENT}"
                    }
                }
            }
        }
        
        stage('Health Check') {
            steps {
                echo 'üè• –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...'
                
                script {
                    def healthUrl = getHealthCheckUrl(params.DEPLOY_ENVIRONMENT)
                    
                    // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                    sleep 30
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
                    def healthCheck = sh(
                        script: "curl -f ${healthUrl} || exit 1",
                        returnStatus: true
                    )
                    
                    if (healthCheck == 0) {
                        echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤–æ –≤ —Å—Ä–µ–¥–µ ${params.DEPLOY_ENVIRONMENT}"
                    } else {
                        error "‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Å—Ä–µ–¥–µ ${params.DEPLOY_ENVIRONMENT}"
                    }
                }
            }
        }
        
        stage('Post Deployment') {
            steps {
                echo 'üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!'
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                script {
                    def message = """
                    üöÄ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!
                    
                    üìã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ${APP_NAME}
                    üåç –°—Ä–µ–¥–∞: ${params.DEPLOY_ENVIRONMENT}
                    üîç –ö–æ–º–º–∏—Ç: ${env.GIT_COMMIT_SHORT}
                    ‚è∞ –í—Ä–µ–º—è: ${new Date().format("yyyy-MM-dd HH:mm:ss")}
                    
                    üîó –°—Å—ã–ª–∫–∏:
                    - Development: http://localhost:3000
                    - Staging: http://localhost:3001
                    - Production: http://localhost:3002
                    """
                    
                    echo message
                }
            }
        }
    }
    
    post {
        always {
            echo 'üßπ –û—á–∏—â–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é...'
            cleanWs()
        }
        
        success {
            echo 'üéâ Pipeline –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!'
        }
        
        failure {
            echo '‚ùå Pipeline –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!'
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            script {
                def errorMessage = """
                ‚ùå –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!
                
                üìã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ${APP_NAME}
                üåç –°—Ä–µ–¥–∞: ${params.DEPLOY_ENVIRONMENT}
                üîç –ö–æ–º–º–∏—Ç: ${env.GIT_COMMIT_SHORT}
                ‚è∞ –í—Ä–µ–º—è: ${new Date().format("yyyy-MM-dd HH:mm:ss")}
                
                üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Jenkins –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
                """
                
                echo errorMessage
            }
        }
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–µ–ø–ª–æ—è –≤ —Ä–∞–∑–Ω—ã–µ —Å—Ä–µ–¥—ã
def deployToDevelopment() {
    echo 'üöÄ –î–µ–ø–ª–æ–π –≤ Development...'
    sh 'docker-compose -f docker-compose.yml up -d app-dev'
}

def deployToStaging() {
    echo 'üöÄ –î–µ–ø–ª–æ–π –≤ Staging...'
    sh 'docker-compose -f docker-compose.yml up -d app-staging'
}

def deployToProduction() {
    echo 'üöÄ –î–µ–ø–ª–æ–π –≤ Production...'
    sh 'docker-compose -f docker-compose.yml up -d app-prod'
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
def getHealthCheckUrl(environment) {
    switch(environment) {
        case 'development':
            return 'http://localhost:3000/health'
        case 'staging':
            return 'http://localhost:3001/health'
        case 'production':
            return 'http://localhost:3002/health'
        default:
            return 'http://localhost:3000/health'
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
