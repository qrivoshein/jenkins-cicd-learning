// –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Task Manager
const assert = require('assert');

// –ú–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
let tasks = [
  { id: 1, title: 'Test Task 1', completed: false, priority: 'high', createdAt: new Date() },
  { id: 2, title: 'Test Task 2', completed: true, priority: 'medium', createdAt: new Date() }
];

let nextId = 3;

// –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
function testCreateTask() {
  const newTask = {
    id: nextId++,
    title: 'New Test Task',
    completed: false,
    priority: 'low',
    createdAt: new Date()
  };
  
  tasks.push(newTask);
  
  assert.strictEqual(tasks.length, 3);
  assert.strictEqual(newTask.title, 'New Test Task');
  assert.strictEqual(newTask.priority, 'low');
  
  console.log('‚úÖ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø—Ä–æ—à–µ–ª');
}

// –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
function testUpdateTask() {
  const taskId = 1;
  const taskIndex = tasks.findIndex(task => task.id === taskId);
  
  if (taskIndex !== -1) {
    tasks[taskIndex].completed = true;
    tasks[taskIndex].priority = 'medium';
  }
  
  assert.strictEqual(tasks[taskIndex].completed, true);
  assert.strictEqual(tasks[taskIndex].priority, 'medium');
  
  console.log('‚úÖ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø—Ä–æ—à–µ–ª');
}

// –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
function testDeleteTask() {
  const initialLength = tasks.length;
  const taskId = 2;
  const taskIndex = tasks.findIndex(task => task.id === taskId);
  
  if (taskIndex !== -1) {
    tasks.splice(taskIndex, 1);
  }
  
  assert.strictEqual(tasks.length, initialLength - 1);
  
  console.log('‚úÖ –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø—Ä–æ—à–µ–ª');
}

// –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
function testValidation() {
  // –¢–µ—Å—Ç –Ω–∞ –ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
  const emptyTitleTask = { title: '', priority: 'high' };
  assert.strictEqual(emptyTitleTask.title === '', true);
  
  // –¢–µ—Å—Ç –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
  const validPriorities = ['low', 'medium', 'high'];
  const testPriority = 'medium';
  assert.strictEqual(validPriorities.includes(testPriority), true);
  
  console.log('‚úÖ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–µ–ª');
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...\n');
  
  try {
    testCreateTask();
    testUpdateTask();
    testDeleteTask();
    testValidation();
    
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    return true;
  } catch (error) {
    console.error('\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª:', error.message);
    return false;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
module.exports = {
  runTests,
  testCreateTask,
  testUpdateTask,
  testDeleteTask,
  testValidation
};

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runTests();
}
